################################################################################
# httpd-git
# Building :
#   1. Place this file to working directory, and rename to "Dockerfile".
#   2. Run following command.
# Usage : docker build -t <image-name> \
#         [--build-arg GIT_ALLOW_FROM=<ipaddress>/<netmask>] \
#         [--build-arg PROXY_URL=<proxy_url>] .
#   * <ipaddress> and <netmask> : "Allow from" network.
# Running :
#   docker run --name=<container-name> --restart=always -p <host-port>:80 \
#   [--privileged -v <repo-parent-path>:/var/lib/git:rw,shared] \
#   -it <image-name>
# Configuration:
#   Before starting docker container, you have to configure user / password to
#   htpasswd.git file using htpasswd command provided from httpd-tools package,
#   and place it to container running
#   "docker cp htpasswd.git <container-name>:/etc/httpd/conf" command.
# Notice :
#   * <repo-parent-path> directory permission shuld be 775.
#   * <repo-parent-path> directory owner/group shuld be apache:apache defined
#     at container's /etc/passwd file.
#
# How to create new repository :
#   1. Login as root, run container and attach it running
#      "docker exec -it <container-name> /bin/bash" command.
#   2. Change to /var/lib/git directory and execute following command.
#        "git init --bare --shared <repository-name>.git"
#   3. Change to <repository-name>.git/hooks directory and execute
#      "cp -dpvi post-update.sample post-update" command.
#   4. If you want to restrict user to push to master branch, do followings.
#     a) Create update file and pasete following script (of course, delete
#       "# " from each line of beginning), and edit adminusers and branches.
# ------------------------------------------------------------------------------
# #!/bin/sh
# adminusers="<user> ..."
# branches="master <other-branch> ..."
# 
# if [ -z ${GIT_COMMITTER_NAME} ]; then
#   if [ -n ${USER} ]; then
#     GIT_COMMITTER_NAME=${USER}
#   else
#     GIT_COMMITTER_NAME=${REMOTE_USER}
#   fi
# fi
# 
# is_admin=false
# for adminuser in ${adminusers}; do
#   if [ ${GIT_COMMITTER_NAME} == ${adminuser} ]; then
#     is_admin=true
#   fi
# done
# for branchname in ${branches}; do
#   if [ ${is_admin} != true -a "$1" == refs/heads/${branchname} ]; then
#     echo "ERROR:  you are not allowed to update ${branchname}" >&2
#     exit 1
#   fi
# done
# ------------------------------------------------------------------------------
#       * adminusers : user list allowed to push.
#       * branches : target branches to restrict push command (usually "master").
#     b) Do following commands.
#       * chmod a+x update
#       * chmod 775 update
#   5. Change to /var/lib/git directory and do following command.
#        "chown -R apache:apache <repository-name>.git"
################################################################################
FROM fedora31-container-base
#FROM fedora
ARG GIT_ALLOW_FROM
ARG PROXY_URL
RUN echo "################################################################################" \
 && echo "##### Installing Smart HTTP Git #####" \
 && echo "################################################################################" \
 && : Installation settings \
 && export BASE_PACKAGES="httpd git langpacks-ja" \
 && export BUILD_PACKAGES="net-tools" \
 && if [ _ != _${PROXY_URL} ]; then export http_proxy=${PROXY_URL} https_proxy=${PROXY_URL}; fi \ 
 && dnf -y install ${BASE_PACKAGES} ${BUILD_PACKAGES} \
 && : Japanese language settings \
 && if [ "" != "`echo ${BASE_PACKAGES} ${DESKTOP_PACKAGES} ${BUILD_PACKAGES} | grep 'langpacks-ja'`" ]; then \
      ln -sf ../usr/share/zoneinfo/Asia/Tokyo /etc/localtime; \
      echo LANG="ja_JP.UTF-8" > /etc/locale.conf; \
    fi \
 && : Generating /usr/local/bin/start-httpd \
 && echo $'#!/bin/sh\n\
\n\
trap "/usr/sbin/httpd -k stop" SIGHUP SIGTERM\n\
/usr/sbin/httpd\n\
while [ `ps h -C httpd | wc -l` -gt 0 ]; do sleep 2; done\n\
echo /usr/sbin/httpd stopped.\n\
exit\n\
: end of file\n'\
> /usr/local/bin/start-httpd \
 && chmod a+x /usr/local/bin/start-httpd \
 && : Generating /etc/httpd/conf.d/git-smart-httpd.conf \
 &&  echo -e "SetEnv GIT_PROJECT_ROOT /var/lib/git\n\
SetEnv GIT_HTTP_EXPORT_ALL\n\
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/\n\
\n\
RewriteEngine On\n\
RewriteCond %{QUERY_STRING} service=git-receive-pack [OR]\n\
RewriteCond %{REQUEST_URI} /git-receive-pack\$\n\
RewriteRule ^/git/ - [E=AUTHREQUIRED]\n\
\n\
<Files \"git-http-backend\">\n\
    AuthType Basic\n\
    AuthName \"Git Access\"\n\
    AuthUserFile /etc/httpd/conf/htpasswd.git\n\
    Require valid-user\n\
    Order Deny,Allow\n\
    Deny from env=AUTHREQUIRED\n\
    Allow from ${GIT_ALLOW_FROM}\n\
    Satisfy any\n\
</Files>"\
> /etc/httpd/conf.d/git-smart-httpd.conf \
 && export GIT_ALLOW_FROM_ESC=`echo ${GIT_ALLOW_FROM} | sed -e 's/\\//\\\\\\//g'` \
 && if [ "" != "${GIT_ALLOW_FROM}" ]; then \
      sed -e "s/\${GIT_ALLOW_FROM}/${GIT_ALLOW_FROM_ESC}/g" -i /etc/httpd/conf.d/git-smart-httpd.conf; \
    else \
      sed -e '/${GIT_ALLOW_FROM}/d' -i /etc/httpd/conf.d/git-smart-httpd.conf; \
    fi \
 && : Removing package cache \
 && dnf clean all
EXPOSE 80
CMD ["/usr/local/bin/start-httpd"]
