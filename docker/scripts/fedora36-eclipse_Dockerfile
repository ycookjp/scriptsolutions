################################################################################
# eclipse-{mate|lxde|xfce}
# Building :
#   1. Place this file to working directory, and rename to "Dockerfile".
#   2. Place following files imported to image.
#     --------------------------------------------------------------------------
#     import-files/
#     |-- archives
#     |   `-- eclipse-dropins.tar.gz
#     |-- files
#     |   `-- etc
#     |       |-- pki
#     |       |   `-- ca-trust
#     |       |       `-- source
#     |       |           `-- anchors
#     |       |               `-- <CA Certificate file(s)>
#     |       `-- skel
#     |           `-- .m2
#     |               `-- settings.xml
#     `-- download (Optional)
#         |-- Windows.10.Dark.v0.9.9.SP1.tar.gz
#         |-- Windows.10.Icons.v0.5.tar.gz
#         |-- eclipse-jee-2022-06-R-linux-gtk-x86_64.tar.gz
#         `-- migu-1m-20150712.zip
#     --------------------------------------------------------------------------
#     * eclipse-dropins.tar.gz : archiving eclipse dropins plug-in(s).
#       dropins directory must be placed at "opt/eclipse/dropins".
#     * settings.xml : Maven settings.xml file. You have to configure
#       proxy setting to this file.
#   3. Run following command.
# Usage : docker build -t <image-name> \
#         --build-arg DESKTOP_ENV={mate|lxde|xfce} \
#         [--build-arg PROXY_URL=<proxy_url>] .
# Running :
#   docker run --name=<container-name> --restart={always|unless-stopped} \
#   -p <host-port>:3389 \
#   [--privileged -v <host-workspac-path>:<container-workspace-path>:rw] \
#   -it <image-name>
# Notice :
#   * <container-workspace-path> directory permission shuld be 770.
#   * <container-workspace-path> directory owner/group shuld be specified
#     user ID / group ID defined at container's /etc/passwd, /etc/group files.
################################################################################
FROM fedora36-container-base
#FROM fedora
ARG DESKTOP_ENV=lxde
ARG GROUP_ID=1000
ARG PROXY_URL
ENV LANG=ja_JP.UTF-8
COPY import-files /var/tmp/import-files/
RUN echo "################################################################################" \
 && echo "##### Installing Desktop Environment #####" \
 && echo "################################################################################" \
 && : Installation settings \
 && export BASE_PACKAGES="--exclude=elementary-greeter @base-x lightdm im-chooser google-noto-sans-cjk-ttc-fonts google-noto-serif-cjk-ttc-fonts langpacks-ja ibus-kkc net-tools xrdp" \
 && export BUILD_PACKAGES="tar unzip passwd" \
 && export RELEASE_VER=36 \
 && export DOWNLOAD_DIR=/var/tmp/import-files/download \
 && export WIN10THEME_URL=https://github.com/B00merang-Project/Windows-10/releases/download/v0.9.9-AU/Windows.10.Dark.v0.9.9.SP1.tar.gz \
 && export WIN10ICON_URL=https://github.com/B00merang-Project/Windows-10/releases/download/v0.9.9-AU/Windows.10.Icons.v0.5.tar.gz \
 && if [ _lxde = _${DESKTOP_ENV} ]; then export DESKTOP_PACKAGES="lxde-common lxpanel lxsession lxpolkit lxappearance lxrandr lxterminal lxdm pcmanfm"; \
    elif [ _mate = _${DESKTOP_ENV} ]; then export DESKTOP_PACKAGES="mate-panel mate-session-manager mate-terminal marco caja"; \
    elif [ _xfce = _${DESKTOP_ENV} ]; then export DESKTOP_PACKAGES="xfce4-panel xfce4-session xfce4-settings xfdesktop xfwm4 xfce4-terminal Thunar"; \
    else export DESKTOP_PACKAGES="@${DESKTOP_ENV}-desktop"; \
    fi \
 && : Proxy settings \
 && if [ _ != _${PROXY_URL} ]; then export http_proxy=${PROXY_URL} https_proxy=${PROXY_URL}; fi \ 
 && if [ _ != _${PROXY_URL} ]; then export OPT_CURL_PROXY="-x ${PROXY_URL}"; fi \
 && : Installing base and desktop environment packages \
 && dnf -y install ${BASE_PACKAGES} ${DESKTOP_PACKAGES} ${BUILD_PACKAGES} \
 && : Japanese language settings \
 && if [ "" != "`echo ${BASE_PACKAGES} ${DESKTOP_PACKAGES} ${BUILD_PACKAGES} | grep 'langpacks-ja'`" ]; then \
      ln -sf ../usr/share/zoneinfo/Asia/Tokyo /etc/localtime; \
      echo LANG="ja_JP.UTF-8" > /etc/locale.conf; \
    fi \
 && : Generating /usr/local/bin/start-xrdp \
 && echo -en '#!/bin/sh\n\
\n\
trap "/sbin/xrdp -k; /sbin/xrdp-sesman -k" SIGHUP SIGTERM\n\
if [ -f /var/run/xrdp.pid ]; then /sbin/xrdp -k; rm -f /var/run/xrdp.pid; fi\n\
if [ -f /var/run/sesman.pid ]; then /sbin/xrdp-sesman -k; rm -f /var/run/sesman.pid; fi\n\
/sbin/xrdp-sesman\n\
/sbin/xrdp\n\
while [ `ps h -C xrdp-sesman,xrdp | wc -l` -gt 0 ]; do sleep 2; done\n\
echo xrdp service stopped.\n\
exit\n'\
> /usr/local/bin/start-xrdp \
 && chmod a+x /usr/local/bin/start-xrdp \
 && : Configuring /etc/xrdp/xrdp.ini \
 && sed -e 's/^max_bpp=32/max_bpp=24/g' -i /etc/xrdp/xrdp.ini \
 && : Generating /etc/skel/.Xclients \
 && if [ _xfce = _${DESKTOP_ENV} ]; then echo "startxfce4" > /etc/skel/.Xclients; \
      elif [ _kde = _${DESKTOP_ENV} -o _lxde = _${DESKTOP_ENV} ]; then echo "start${DESKTOP_ENV}" > /etc/skel/.Xclients; \
      elif [ _gnome = _${DESKTOP_ENV} -o _mate = _${DESKTOP_ENV} ]; then echo "${DESKTOP_ENV}-session" > /etc/skel/.Xclients; \
      else echo "${DESKTOP_ENV}" > /etc/skel/.Xclients; \
    fi \
 && chmod +x /etc/skel/.Xclients \
 && : Downloading Win10 Theme and installing \
 && if [ ! -f ${DOWNLOAD_DIR}/`basename ${WIN10THEME_URL}` ]; then \
      curl ${OPT_CURL_PROXY} --create-dirs -L ${WIN10THEME_URL} -o ${DOWNLOAD_DIR}/`basename ${WIN10THEME_URL}`; \
    fi \
 && tar --overwrite -xvz -f ${DOWNLOAD_DIR}/`basename ${WIN10THEME_URL}` -C /usr/share/themes \
 && : Downloading Win10 Icons and installing \
 && if [ ! -f ${DOWNLOAD_DIR}/`basename ${WIN10ICON_URL}` ]; then \
      curl ${OPT_CURL_PROXY} --create-dirs -L ${WIN10ICON_URL} -o ${DOWNLOAD_DIR}/`basename ${WIN10ICON_URL}`; \
    fi \
 && tar --overwrite -xvz -f ${DOWNLOAD_DIR}/`basename ${WIN10ICON_URL}` -C /usr/share/icons \
 && : Copying import files \
 && if [ -d /var/tmp/import-files/files ]; then \
      cp -R /var/tmp/import-files/files/* /; \
      if [ -f /usr/bin/update-ca-trust ]; then \
        /usr/bin/update-ca-trust extract; \
      fi \
    fi \
 && if [ -d /var/tmp/import-files/archives ]; then \
      for f in `find /var/tmp/import-files/archives -name '*.tar.gz'`; do \
        tar --overwrite -xvz -f $f -C /; \
      done \
    fi \
 && : Creating developers group and developer user with password developer \
 && groupadd -g ${GROUP_ID} developers \
 && useradd -G developers developer \
 && usermod -p '$6$uR3QShUKOAj.K2gJ$.HkhrYGZLRMW7xEzuRH2K2hkF8C3tvK8xxDpJy/uOHPb7Kv4x.xlDpG8Zz3IvaukTtokPRcDaMHJVpRh1EHed.' developer \
 && echo "################################################################################" \
 && echo "##### Installing Eclipse IDE #####" \
 && echo "################################################################################" \
 && : Eclipse settings \
 && export ECLIPSE_URL=http://ftp.yz.yamagata-u.ac.jp/pub/eclipse/technology/epp/downloads/release/2022-06/R/eclipse-jee-2022-06-R-linux-gtk-x86_64.tar.gz \
 && export MIGU_URL=https://osdn.jp/projects/mix-mplus-ipa/downloads/63545/migu-1m-20150712.zip \
 && : Installing openjdk \
 && dnf install -y java-11-openjdk-devel webkit2gtk3 \
 && : Downloading Eclipse IDE and installing \
 && if [ ! -f ${DOWNLOAD_DIR}/`basename ${ECLIPSE_URL}` ]; then \
      curl ${OPT_CURL_PROXY} --create-dirs -L ${ECLIPSE_URL} -o ${DOWNLOAD_DIR}/`basename ${ECLIPSE_URL}`; \
    fi \
 && tar --overwrite -xvz -f ${DOWNLOAD_DIR}/`basename ${ECLIPSE_URL}` -C /opt \
 && : Creating eclipse menu entry \
 && mkdir -p /usr/share/applications \
 && echo -en '[Desktop Entry]\n\
Version=1.0\n\
Type=Application\n\
Name=Eclipse\n\
GenericName=Java IDE\n\
Comment=Eclipse Java IDE\n\
Icon=/opt/eclipse/icon.xpm\n\
Categories=GTK;Development;IDE;\n\
Exec=/opt/eclipse/eclipse %U\n\
TryExec=/opt/eclipse/eclipse\n'\
> /usr/share/applications/eclipse.desktop \
 && : Downloading and installing migu font \
 && if [ ! -f ${DOWNLOAD_DIR}/`basename ${MIGU_URL}` ]; then \
      curl ${OPT_CURL_PROXY} --create-dirs -L ${MIGU_URL} -o ${DOWNLOAD_DIR}/`basename ${MIGU_URL}`; \
    fi \
 && mkdir -p /usr/share/fonts \
 && unzip -o -d /usr/share/fonts ${DOWNLOAD_DIR}/`basename ${MIGU_URL}` \
 && rm -rf /usr/share/fonts/migu-1m-20150712/ipag00303/ \
       /usr/share/fonts/migu-1m-20150712/mplus-TESTFLIGHT-060/ \
       /usr/share/fonts/migu-1m-20150712/*.txt \
 && : Removing package cache \
 && dnf clean all \
 && rm -rf /var/tmp/*
EXPOSE 3389
CMD ["/usr/local/bin/start-xrdp"]
